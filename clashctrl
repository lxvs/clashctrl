#!/bin/bash
set -o nounset

error () {
    local error="${1-unspecified error}"
    >&2 printf "error: %s\n" "$1"
    exit 1
}

curl_help () {
cat <<EOF
usage: clashctrl curl [<option> ...] <url>

Send custom curl requests.
If url starts with '/', prefix 'http://127.0.0.1:9090'.

options:
    -X, --request   request, default is GET; if -d/--data is specified
                    and -G/--get is not, default is PUT instead
                    PUT (when body is specified)
    -H, --header    header, default is "Content-Type: application/json"
    -d, --data      data
    -G, --get       make all data specified with -d or --data to be used in
                    an HTTP GET request instead of the POST request that
                    otherwise would be used. The data will be appended to
                    the URL with a '?' separator.

EOF
}

psv () {
    test $# -ge 2 || error "$1 requires a value"
    val="$2"
}

curl_op () {
    local X H d G url
    local val
    local urlprefix='http://127.0.0.1:9090'
    while test $# -ge 1
    do
        case "$1" in
        -X|--request)
            psv "$@"
            shift 2
            X="$val"
            ;;
        -H|--header)
            psv "$@"
            shift 2
            H="$val"
            ;;
        -d|--data)
            psv "$@"
            shift 2
            d="$val"
            ;;
        -G|--get)
            G="-G"
            shift
            ;;
        *)
            test "${url-}" && error "invalid argument: $1"
            url="$1"
            shift
            ;;
        esac
    done
    test "${url-}" || error "no URL specified"
    test ! "${X-}" && test "${d-}" && test ! "${G-}" && X="PUT"
    printf "%s" "$url" | grep -q '^/' && url="${urlprefix}${url}"
    curl -sS ${G-} -X "${X-GET}" "$url" \
        -H "${H-Content-Type: application/json}" \
        ${d:+-d "$d"}
}

list_help () {
cat <<EOF
usage: clashctrl list

List all proxies.
EOF
}

list_op () {
    test $# -eq 0 || error "too many arguments"
    curl -sS -X GET \
        -H "Content-Type: application/json" \
        "http://127.0.0.1:9090/proxies"
}

get_help () {
cat <<EOF
usage: clashctrl get [<selector>]

Get current <selector> proxy, <selector> is GLOBAL if not specified.
EOF
}

get_op () {
    local selector
    case $# in
    0)
        selector="GLOBAL"
        ;;
    1)
        selector="$1"
        ;;
    *)
        error "too many arguments"
        ;;
    esac
    curl -sS -X GET \
        -H "Content-Type: application/json" \
        "http://127.0.0.1:9090/proxies/$selector"
}

switch_help () {
cat <<EOF
usage: clashctrl switch <proxy>

Switch current GLOBAL proxy to <proxy>.
EOF
}

switch_op () {
    local proxy
    case $# in
    1)
        proxy="$1"
        ;;
    *)
        error "'switch' takes 1 argument."
        ;;
    esac
    curl -sS -X PUT \
        -H "Content-Type: application/json" \
        http://127.0.0.1:9090/proxies/GLOBAL \
        -d "{\"name\": \"$proxy\"}"
}

Version () {
cat <<EOF
clashctrl $version
$ghlink
EOF
}

Help () {
cat <<EOF
usage:
    clashctrl <operation> [<argument> ...]
    clashctrl -h | --help
    clashctrl -v | --version

operation:
    switch          switch current GLOBAL proxy
    get             get current GLOBAL proxy
    list            list all proxies
    curl            custom curl

Use clashctrl <operation> --help for more about <operation>.
EOF
}

TryToHelp () {
    while test $# -ge 1
    do
        case "$1" in
        -h|--help)
            ${op}_help
            exit 0
            ;;
        *)
            shift
            ;;
        esac
    done
}

main () {
    local op
    readonly version='0.0.1'
    readonly ghlink='https://github.com/lxvs/clashctrl'
    if test $# -eq 0
    then
        Help
        exit 0
    fi
    op="$1"
    shift
    case "$op" in
    -v|--version|version)
        Version
        exit 0
        ;;
    -h|--help|help)
        Help
        exit 0
        ;;
    switch|get|list|curl)
        TryToHelp "$@"
        ${op}_op "$@"
        ;;
    *)
        error "invalid operation: $op"
        ;;
    esac
}

main "$@"
